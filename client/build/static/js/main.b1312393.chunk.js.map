{"version":3,"sources":["logo.svg","InputForm.jsx","MatchHistory.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","preventDefault","setState","summonerName","target","value","handleSubmit","axios","post","state","then","res","getMatchHistory","data","summoner","matches","bind","assertThisInitialized","react_default","a","createElement","onSubmit","type","name","onChange","Component","MatchHistory","displayMatch","findChampionName","findRuneName","findSummonerSpellName","findItemName","key","championName","parsedChampions","JSON","parse","stringify","Champions","values","forEach","champion","Number","id","runeName","Runes","rune","slots","slot","runes","runeSlot","summonerSpellName","parsedSummonerSpells","SummonerSpells","spell","itemName","parsedItems","Items","keys","item","_this2","arguments","length","undefined","map","match","stats","win","className","Math","floor","gameDuration","champLevel","summSpellOne","summSpellTwo","item0","item1","item2","item3","item4","item5","totalMinionsKilled","kills","assists","deaths","perk0","perk1","perk2","perk3","perk4","perk5","App","src_InputForm","src_MatchHistory","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1312393.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass InputForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (event) => {\n    event.preventDefault();\n    this.setState({summonerName: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    axios.post('/summonername', {summonerName: this.state.summonerName})\n      .then((res) => {\n        this.props.getMatchHistory(res.data.summoner, res.data.matches);\n      });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Summoner Name:\n          <input type=\"text\" name=\"summonername\" onChange={this.handleChange}/>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }\n}\n\nexport default InputForm;","import React, { Component } from 'react';\nimport Champions from './en_US/champion.json';\nimport Items from './en_US/item.json';\nimport Runes from './en_US/runesReforged.json';\nimport SummonerSpells from './en_US/summoner.json';\n\nclass MatchHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.displayMatch = this.displayMatch.bind(this);\n    this.findChampionName = this.findChampionName.bind(this);\n    this.findRuneName = this.findRuneName.bind(this);\n    this.findSummonerSpellName = this.findSummonerSpellName.bind(this);\n    this.findItemName = this.findItemName.bind(this);\n  }\n\n  findChampionName(key) {\n    let championName;\n    let parsedChampions = JSON.parse(JSON.stringify(Champions)).data;\n    Object.values(parsedChampions).forEach((champion) => {\n      if (Number(champion.key) === key) {\n        championName = champion.name;\n      }\n    });\n    return championName;\n  }\n\n  findRuneName(id) {\n    let runeName;\n    let parsedRunes = JSON.parse(JSON.stringify(Runes));\n    parsedRunes.forEach((rune) => {\n      rune.slots.forEach((slot) => {\n        slot.runes.forEach((runeSlot) => {\n          if (Number(runeSlot.id) === id) {\n            runeName = runeSlot.name;\n          }\n        });\n      });\n    });\n    return runeName;\n  }\n\n  findSummonerSpellName(key) {\n    let summonerSpellName;\n    let parsedSummonerSpells = JSON.parse(JSON.stringify(SummonerSpells)).data;\n    Object.values(parsedSummonerSpells).forEach((spell) => {\n      if (Number(spell.key) === key) {\n        summonerSpellName = spell.name;\n      }\n    });\n    return summonerSpellName;\n  }\n\n  findItemName(key) {\n    let itemName;\n    let parsedItems = JSON.parse(JSON.stringify(Items)).data;\n    Object.keys(parsedItems).forEach((item) => {\n      if (Number(item) === key) {\n        itemName = parsedItems[key].name;\n      }\n    });\n    return itemName;\n  }\n\n  displayMatch(matches=[]) {\n    return matches.map(match => {\n      return (\n          match.stats.win ? (\n            <div className=\"matchBoxWin\">\n              <h5>Game Duration: {Math.floor(match.gameDuration/60)} minutes and {match.gameDuration % 60} seconds</h5>\n              <h5>Champion Played: {this.findChampionName(match.champion)} Level:{match.stats.champLevel}</h5>\n              <h5>Summoner Spells: {this.findSummonerSpellName(match.summSpellOne)} & {this.findSummonerSpellName(match.summSpellTwo)}</h5>\n              <h5>Items bought: {this.findItemName(match.stats.item0)}, {this.findItemName(match.stats.item1)}, {this.findItemName(match.stats.item2)}, {this.findItemName(match.stats.item3)}, {this.findItemName(match.stats.item4)}, {this.findItemName(match.stats.item5)}</h5>\n              <h5>CS: {match.stats.totalMinionsKilled}</h5>\n              <h5>CS/min: {Math.floor((match.stats.totalMinionsKilled/match.gameDuration*60) * 100) / 100}</h5>\n              <h5>K/DA: {Math.floor(((match.stats.kills+match.stats.assists)/match.stats.deaths) * 100) / 100}</h5>\n              <h5>Runes: {this.findRuneName(match.stats.perk0)}, {this.findRuneName(match.stats.perk1)}, {this.findRuneName(match.stats.perk2)}, {this.findRuneName(match.stats.perk3)}, {this.findRuneName(match.stats.perk4)}, {this.findRuneName(match.stats.perk5)}</h5>\n            </div>\n            ) : (\n            <div className=\"matchBoxLose\">\n              <h5>Game Duration: {Math.floor(match.gameDuration/60)} minutes and {match.gameDuration % 60} seconds</h5>\n              <h5>Champion Played: {this.findChampionName(match.champion)} Level:{match.stats.champLevel}</h5>\n              <h5>Summoner Spells: {this.findSummonerSpellName(match.summSpellOne)} & {this.findSummonerSpellName(match.summSpellTwo)}</h5>\n              <h5>Items bought: {this.findItemName(match.stats.item0)}, {this.findItemName(match.stats.item1)}, {this.findItemName(match.stats.item2)}, {this.findItemName(match.stats.item3)}, {this.findItemName(match.stats.item4)}, {this.findItemName(match.stats.item5)}</h5>\n              <h5>CS: {match.stats.totalMinionsKilled}</h5>\n              <h5>CS/min: {Math.floor((match.stats.totalMinionsKilled/match.gameDuration*60) * 100) / 100}</h5>\n              <h5>K/DA: {Math.floor(((match.stats.kills+match.stats.assists)/match.stats.deaths) * 100) / 100}</h5>\n              <h5>Runes: {this.findRuneName(match.stats.perk0)}, {this.findRuneName(match.stats.perk1)}, {this.findRuneName(match.stats.perk2)}, {this.findRuneName(match.stats.perk3)}, {this.findRuneName(match.stats.perk4)}, {this.findRuneName(match.stats.perk5)}</h5>\n            </div>\n            )\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.summoner.name ? (\n          <h1>Displaying Match History for {this.props.summoner.name}</h1>\n          ) : (\n          <h1>Loading...</h1>\n        )}\n        {this.displayMatch(this.props.matches)}\n      </div>\n    )\n  }\n}\n\nexport default MatchHistory;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport InputForm from './InputForm.jsx';\nimport MatchHistory from './MatchHistory.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {matches: [], summoner: {}};\n    this.getMatchHistory = this.getMatchHistory.bind(this);\n  }\n\n  getMatchHistory = (summoner, matches) => {\n    this.setState({summoner: summoner, matches: matches});\n  }\n\n  render() {\n    return (\n      <div>\n        <InputForm getMatchHistory={this.getMatchHistory} />\n        <MatchHistory matches={this.state.matches} summoner={this.state.summoner} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}